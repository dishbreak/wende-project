// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laserMsgs.proto

#ifndef PROTOBUF_laserMsgs_2eproto__INCLUDED
#define PROTOBUF_laserMsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace laserMsgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_laserMsgs_2eproto();
void protobuf_AssignDesc_laserMsgs_2eproto();
void protobuf_ShutdownFile_laserMsgs_2eproto();

class laserStatus;
class pose;
class laserPose;

enum systemStatus {
  LASER_DOWN = 0,
  LASER_READY = 1,
  LASER_OPERATIONAL = 2,
  LASER_ERROR = 3,
  LASER_FAILED = 4,
  UNKNOWN = 5
};
bool systemStatus_IsValid(int value);
const systemStatus systemStatus_MIN = LASER_DOWN;
const systemStatus systemStatus_MAX = UNKNOWN;
const int systemStatus_ARRAYSIZE = systemStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* systemStatus_descriptor();
inline const ::std::string& systemStatus_Name(systemStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    systemStatus_descriptor(), value);
}
inline bool systemStatus_Parse(
    const ::std::string& name, systemStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<systemStatus>(
    systemStatus_descriptor(), name, value);
}
// ===================================================================

class laserStatus : public ::google::protobuf::Message {
 public:
  laserStatus();
  virtual ~laserStatus();
  
  laserStatus(const laserStatus& from);
  
  inline laserStatus& operator=(const laserStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const laserStatus& default_instance();
  
  void Swap(laserStatus* other);
  
  // implements Message ----------------------------------------------
  
  laserStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const laserStatus& from);
  void MergeFrom(const laserStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional int64 PMW_AZ = 2;
  inline bool has_pmw_az() const;
  inline void clear_pmw_az();
  static const int kPMWAZFieldNumber = 2;
  inline ::google::protobuf::int64 pmw_az() const;
  inline void set_pmw_az(::google::protobuf::int64 value);
  
  // optional int64 PMW_EL = 3;
  inline bool has_pmw_el() const;
  inline void clear_pmw_el();
  static const int kPMWELFieldNumber = 3;
  inline ::google::protobuf::int64 pmw_el() const;
  inline void set_pmw_el(::google::protobuf::int64 value);
  
  // optional .laserMsgs.systemStatus status = 4 [default = UNKNOWN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline laserMsgs::systemStatus status() const;
  inline void set_status(laserMsgs::systemStatus value);
  
  // optional string text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // @@protoc_insertion_point(class_scope:laserMsgs.laserStatus)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_pmw_az();
  inline void clear_has_pmw_az();
  inline void set_has_pmw_el();
  inline void clear_has_pmw_el();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 pmw_az_;
  ::google::protobuf::int64 pmw_el_;
  ::std::string* text_;
  int status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_laserMsgs_2eproto();
  friend void protobuf_AssignDesc_laserMsgs_2eproto();
  friend void protobuf_ShutdownFile_laserMsgs_2eproto();
  
  void InitAsDefaultInstance();
  static laserStatus* default_instance_;
};
// -------------------------------------------------------------------

class pose : public ::google::protobuf::Message {
 public:
  pose();
  virtual ~pose();
  
  pose(const pose& from);
  
  inline pose& operator=(const pose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const pose& default_instance();
  
  void Swap(pose* other);
  
  // implements Message ----------------------------------------------
  
  pose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pose& from);
  void MergeFrom(const pose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 pulseAZ = 1;
  inline bool has_pulseaz() const;
  inline void clear_pulseaz();
  static const int kPulseAZFieldNumber = 1;
  inline ::google::protobuf::uint32 pulseaz() const;
  inline void set_pulseaz(::google::protobuf::uint32 value);
  
  // optional uint32 pulseEL = 2;
  inline bool has_pulseel() const;
  inline void clear_pulseel();
  static const int kPulseELFieldNumber = 2;
  inline ::google::protobuf::uint32 pulseel() const;
  inline void set_pulseel(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:laserMsgs.pose)
 private:
  inline void set_has_pulseaz();
  inline void clear_has_pulseaz();
  inline void set_has_pulseel();
  inline void clear_has_pulseel();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 pulseaz_;
  ::google::protobuf::uint32 pulseel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_laserMsgs_2eproto();
  friend void protobuf_AssignDesc_laserMsgs_2eproto();
  friend void protobuf_ShutdownFile_laserMsgs_2eproto();
  
  void InitAsDefaultInstance();
  static pose* default_instance_;
};
// -------------------------------------------------------------------

class laserPose : public ::google::protobuf::Message {
 public:
  laserPose();
  virtual ~laserPose();
  
  laserPose(const laserPose& from);
  
  inline laserPose& operator=(const laserPose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const laserPose& default_instance();
  
  void Swap(laserPose* other);
  
  // implements Message ----------------------------------------------
  
  laserPose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const laserPose& from);
  void MergeFrom(const laserPose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional .laserMsgs.pose target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline const ::laserMsgs::pose& target() const;
  inline ::laserMsgs::pose* mutable_target();
  inline ::laserMsgs::pose* release_target();
  
  // optional bool laserOn = 3;
  inline bool has_laseron() const;
  inline void clear_laseron();
  static const int kLaserOnFieldNumber = 3;
  inline bool laseron() const;
  inline void set_laseron(bool value);
  
  // @@protoc_insertion_point(class_scope:laserMsgs.laserPose)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_laseron();
  inline void clear_has_laseron();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::laserMsgs::pose* target_;
  bool laseron_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_laserMsgs_2eproto();
  friend void protobuf_AssignDesc_laserMsgs_2eproto();
  friend void protobuf_ShutdownFile_laserMsgs_2eproto();
  
  void InitAsDefaultInstance();
  static laserPose* default_instance_;
};
// ===================================================================


// ===================================================================

// laserStatus

// optional int64 time = 1;
inline bool laserStatus::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void laserStatus::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void laserStatus::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void laserStatus::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 laserStatus::time() const {
  return time_;
}
inline void laserStatus::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int64 PMW_AZ = 2;
inline bool laserStatus::has_pmw_az() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void laserStatus::set_has_pmw_az() {
  _has_bits_[0] |= 0x00000002u;
}
inline void laserStatus::clear_has_pmw_az() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void laserStatus::clear_pmw_az() {
  pmw_az_ = GOOGLE_LONGLONG(0);
  clear_has_pmw_az();
}
inline ::google::protobuf::int64 laserStatus::pmw_az() const {
  return pmw_az_;
}
inline void laserStatus::set_pmw_az(::google::protobuf::int64 value) {
  set_has_pmw_az();
  pmw_az_ = value;
}

// optional int64 PMW_EL = 3;
inline bool laserStatus::has_pmw_el() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void laserStatus::set_has_pmw_el() {
  _has_bits_[0] |= 0x00000004u;
}
inline void laserStatus::clear_has_pmw_el() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void laserStatus::clear_pmw_el() {
  pmw_el_ = GOOGLE_LONGLONG(0);
  clear_has_pmw_el();
}
inline ::google::protobuf::int64 laserStatus::pmw_el() const {
  return pmw_el_;
}
inline void laserStatus::set_pmw_el(::google::protobuf::int64 value) {
  set_has_pmw_el();
  pmw_el_ = value;
}

// optional .laserMsgs.systemStatus status = 4 [default = UNKNOWN];
inline bool laserStatus::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void laserStatus::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void laserStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void laserStatus::clear_status() {
  status_ = 5;
  clear_has_status();
}
inline laserMsgs::systemStatus laserStatus::status() const {
  return static_cast< laserMsgs::systemStatus >(status_);
}
inline void laserStatus::set_status(laserMsgs::systemStatus value) {
  GOOGLE_DCHECK(laserMsgs::systemStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string text = 5;
inline bool laserStatus::has_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void laserStatus::set_has_text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void laserStatus::clear_has_text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void laserStatus::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& laserStatus::text() const {
  return *text_;
}
inline void laserStatus::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void laserStatus::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void laserStatus::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* laserStatus::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* laserStatus::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// pose

// optional uint32 pulseAZ = 1;
inline bool pose::has_pulseaz() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pose::set_has_pulseaz() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pose::clear_has_pulseaz() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pose::clear_pulseaz() {
  pulseaz_ = 0u;
  clear_has_pulseaz();
}
inline ::google::protobuf::uint32 pose::pulseaz() const {
  return pulseaz_;
}
inline void pose::set_pulseaz(::google::protobuf::uint32 value) {
  set_has_pulseaz();
  pulseaz_ = value;
}

// optional uint32 pulseEL = 2;
inline bool pose::has_pulseel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pose::set_has_pulseel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pose::clear_has_pulseel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pose::clear_pulseel() {
  pulseel_ = 0u;
  clear_has_pulseel();
}
inline ::google::protobuf::uint32 pose::pulseel() const {
  return pulseel_;
}
inline void pose::set_pulseel(::google::protobuf::uint32 value) {
  set_has_pulseel();
  pulseel_ = value;
}

// -------------------------------------------------------------------

// laserPose

// optional int64 time = 1;
inline bool laserPose::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void laserPose::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void laserPose::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void laserPose::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 laserPose::time() const {
  return time_;
}
inline void laserPose::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional .laserMsgs.pose target = 2;
inline bool laserPose::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void laserPose::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void laserPose::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void laserPose::clear_target() {
  if (target_ != NULL) target_->::laserMsgs::pose::Clear();
  clear_has_target();
}
inline const ::laserMsgs::pose& laserPose::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::laserMsgs::pose* laserPose::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::laserMsgs::pose;
  return target_;
}
inline ::laserMsgs::pose* laserPose::release_target() {
  clear_has_target();
  ::laserMsgs::pose* temp = target_;
  target_ = NULL;
  return temp;
}

// optional bool laserOn = 3;
inline bool laserPose::has_laseron() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void laserPose::set_has_laseron() {
  _has_bits_[0] |= 0x00000004u;
}
inline void laserPose::clear_has_laseron() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void laserPose::clear_laseron() {
  laseron_ = false;
  clear_has_laseron();
}
inline bool laserPose::laseron() const {
  return laseron_;
}
inline void laserPose::set_laseron(bool value) {
  set_has_laseron();
  laseron_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace laserMsgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< laserMsgs::systemStatus>() {
  return laserMsgs::systemStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_laserMsgs_2eproto__INCLUDED
