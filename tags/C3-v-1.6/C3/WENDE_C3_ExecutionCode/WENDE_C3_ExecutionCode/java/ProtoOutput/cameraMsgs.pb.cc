// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cameraMsgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cameraMsgs {

namespace {

const ::google::protobuf::Descriptor* cameraStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cameraStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* track_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  track_reflection_ = NULL;
const ::google::protobuf::Descriptor* cameraTracks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cameraTracks_reflection_ = NULL;
const ::google::protobuf::Descriptor* cameraImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cameraImage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* systemStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cameraMsgs_2eproto() {
  protobuf_AddDesc_cameraMsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cameraMsgs.proto");
  GOOGLE_CHECK(file != NULL);
  cameraStatus_descriptor_ = file->message_type(0);
  static const int cameraStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraStatus, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraStatus, laseron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraStatus, text_),
  };
  cameraStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cameraStatus_descriptor_,
      cameraStatus::default_instance_,
      cameraStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cameraStatus));
  track_descriptor_ = file->message_type(1);
  static const int track_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(track, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(track, y_),
  };
  track_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      track_descriptor_,
      track::default_instance_,
      track_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(track, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(track, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(track));
  cameraTracks_descriptor_ = file->message_type(2);
  static const int cameraTracks_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraTracks, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraTracks, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraTracks, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraTracks, laser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraTracks, laseron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraTracks, roverdetected_),
  };
  cameraTracks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cameraTracks_descriptor_,
      cameraTracks::default_instance_,
      cameraTracks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraTracks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraTracks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cameraTracks));
  cameraImage_descriptor_ = file->message_type(3);
  static const int cameraImage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraImage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraImage, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraImage, sizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraImage, sizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraImage, imagedata_),
  };
  cameraImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cameraImage_descriptor_,
      cameraImage::default_instance_,
      cameraImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cameraImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cameraImage));
  systemStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cameraMsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cameraStatus_descriptor_, &cameraStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    track_descriptor_, &track::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cameraTracks_descriptor_, &cameraTracks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cameraImage_descriptor_, &cameraImage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cameraMsgs_2eproto() {
  delete cameraStatus::default_instance_;
  delete cameraStatus_reflection_;
  delete track::default_instance_;
  delete track_reflection_;
  delete cameraTracks::default_instance_;
  delete cameraTracks_reflection_;
  delete cameraImage::default_instance_;
  delete cameraImage_reflection_;
}

void protobuf_AddDesc_cameraMsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020cameraMsgs.proto\022\ncameraMsgs\"n\n\014camera"
    "Status\022\014\n\004time\030\001 \001(\003\0221\n\006status\030\002 \001(\0162\030.c"
    "ameraMsgs.systemStatus:\007UNKNOWN\022\017\n\007laser"
    "On\030\003 \001(\010\022\014\n\004text\030\004 \001(\t\"\035\n\005track\022\t\n\001x\030\001 \001"
    "(\021\022\t\n\001y\030\002 \001(\021\"\274\001\n\014cameraTracks\022\014\n\004time\030\001"
    " \001(\003\0221\n\006status\030\002 \001(\0162\030.cameraMsgs.system"
    "Status:\007UNKNOWN\022!\n\006target\030\003 \003(\0132\021.camera"
    "Msgs.track\022 \n\005laser\030\004 \003(\0132\021.cameraMsgs.t"
    "rack\022\017\n\007laserOn\030\005 \001(\010\022\025\n\rroverDetected\030\006"
    " \001(\010\"^\n\013cameraImage\022\014\n\004time\030\001 \001(\003\022\020\n\010cha"
    "nnels\030\002 \001(\021\022\r\n\005sizeX\030\003 \001(\021\022\r\n\005sizeY\030\004 \001("
    "\021\022\021\n\timageData\030\005 \001(\014*{\n\014systemStatus\022\017\n\013"
    "CAMERA_DOWN\020\000\022\020\n\014CAMERA_READY\020\001\022\026\n\022CAMER"
    "A_OPERATIONAL\020\002\022\020\n\014CAMERA_ERROR\020\003\022\021\n\rCAM"
    "ERA_FAILED\020\004\022\013\n\007UNKNOWN\020\005B\014\n\ncom.camera", 599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cameraMsgs.proto", &protobuf_RegisterTypes);
  cameraStatus::default_instance_ = new cameraStatus();
  track::default_instance_ = new track();
  cameraTracks::default_instance_ = new cameraTracks();
  cameraImage::default_instance_ = new cameraImage();
  cameraStatus::default_instance_->InitAsDefaultInstance();
  track::default_instance_->InitAsDefaultInstance();
  cameraTracks::default_instance_->InitAsDefaultInstance();
  cameraImage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cameraMsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cameraMsgs_2eproto {
  StaticDescriptorInitializer_cameraMsgs_2eproto() {
    protobuf_AddDesc_cameraMsgs_2eproto();
  }
} static_descriptor_initializer_cameraMsgs_2eproto_;

const ::google::protobuf::EnumDescriptor* systemStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return systemStatus_descriptor_;
}
bool systemStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int cameraStatus::kTimeFieldNumber;
const int cameraStatus::kStatusFieldNumber;
const int cameraStatus::kLaserOnFieldNumber;
const int cameraStatus::kTextFieldNumber;
#endif  // !_MSC_VER

cameraStatus::cameraStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cameraStatus::InitAsDefaultInstance() {
}

cameraStatus::cameraStatus(const cameraStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cameraStatus::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  status_ = 5;
  laseron_ = false;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cameraStatus::~cameraStatus() {
  SharedDtor();
}

void cameraStatus::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void cameraStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cameraStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cameraStatus_descriptor_;
}

const cameraStatus& cameraStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cameraMsgs_2eproto();  return *default_instance_;
}

cameraStatus* cameraStatus::default_instance_ = NULL;

cameraStatus* cameraStatus::New() const {
  return new cameraStatus;
}

void cameraStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    status_ = 5;
    laseron_ = false;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cameraStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (cameraMsgs::systemStatus_IsValid(value)) {
            set_status(static_cast< cameraMsgs::systemStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_laserOn;
        break;
      }
      
      // optional bool laserOn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laserOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &laseron_)));
          set_has_laseron();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }
      
      // optional string text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cameraStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }
  
  // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }
  
  // optional bool laserOn = 3;
  if (has_laseron()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->laseron(), output);
  }
  
  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cameraStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }
  
  // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }
  
  // optional bool laserOn = 3;
  if (has_laseron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->laseron(), target);
  }
  
  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cameraStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional bool laserOn = 3;
    if (has_laseron()) {
      total_size += 1 + 1;
    }
    
    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cameraStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cameraStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cameraStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cameraStatus::MergeFrom(const cameraStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_laseron()) {
      set_laseron(from.laseron());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cameraStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cameraStatus::CopyFrom(const cameraStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cameraStatus::IsInitialized() const {
  
  return true;
}

void cameraStatus::Swap(cameraStatus* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(status_, other->status_);
    std::swap(laseron_, other->laseron_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cameraStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cameraStatus_descriptor_;
  metadata.reflection = cameraStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int track::kXFieldNumber;
const int track::kYFieldNumber;
#endif  // !_MSC_VER

track::track()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void track::InitAsDefaultInstance() {
}

track::track(const track& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void track::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

track::~track() {
  SharedDtor();
}

void track::SharedDtor() {
  if (this != default_instance_) {
  }
}

void track::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* track::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return track_descriptor_;
}

const track& track::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cameraMsgs_2eproto();  return *default_instance_;
}

track* track::default_instance_ = NULL;

track* track::New() const {
  return new track;
}

void track::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool track::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // optional sint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void track::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }
  
  // optional sint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* track::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }
  
  // optional sint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int track::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }
    
    // optional sint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void track::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const track* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const track*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void track::MergeFrom(const track& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void track::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void track::CopyFrom(const track& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool track::IsInitialized() const {
  
  return true;
}

void track::Swap(track* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata track::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = track_descriptor_;
  metadata.reflection = track_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cameraTracks::kTimeFieldNumber;
const int cameraTracks::kStatusFieldNumber;
const int cameraTracks::kTargetFieldNumber;
const int cameraTracks::kLaserFieldNumber;
const int cameraTracks::kLaserOnFieldNumber;
const int cameraTracks::kRoverDetectedFieldNumber;
#endif  // !_MSC_VER

cameraTracks::cameraTracks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cameraTracks::InitAsDefaultInstance() {
}

cameraTracks::cameraTracks(const cameraTracks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cameraTracks::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  status_ = 5;
  laseron_ = false;
  roverdetected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cameraTracks::~cameraTracks() {
  SharedDtor();
}

void cameraTracks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cameraTracks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cameraTracks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cameraTracks_descriptor_;
}

const cameraTracks& cameraTracks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cameraMsgs_2eproto();  return *default_instance_;
}

cameraTracks* cameraTracks::default_instance_ = NULL;

cameraTracks* cameraTracks::New() const {
  return new cameraTracks;
}

void cameraTracks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    status_ = 5;
    laseron_ = false;
    roverdetected_ = false;
  }
  target_.Clear();
  laser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cameraTracks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (cameraMsgs::systemStatus_IsValid(value)) {
            set_status(static_cast< cameraMsgs::systemStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }
      
      // repeated .cameraMsgs.track target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        if (input->ExpectTag(34)) goto parse_laser;
        break;
      }
      
      // repeated .cameraMsgs.track laser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_laser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_laser;
        if (input->ExpectTag(40)) goto parse_laserOn;
        break;
      }
      
      // optional bool laserOn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laserOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &laseron_)));
          set_has_laseron();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roverDetected;
        break;
      }
      
      // optional bool roverDetected = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roverDetected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roverdetected_)));
          set_has_roverdetected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cameraTracks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }
  
  // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }
  
  // repeated .cameraMsgs.track target = 3;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(i), output);
  }
  
  // repeated .cameraMsgs.track laser = 4;
  for (int i = 0; i < this->laser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->laser(i), output);
  }
  
  // optional bool laserOn = 5;
  if (has_laseron()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->laseron(), output);
  }
  
  // optional bool roverDetected = 6;
  if (has_roverdetected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->roverdetected(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cameraTracks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }
  
  // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }
  
  // repeated .cameraMsgs.track target = 3;
  for (int i = 0; i < this->target_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(i), target);
  }
  
  // repeated .cameraMsgs.track laser = 4;
  for (int i = 0; i < this->laser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->laser(i), target);
  }
  
  // optional bool laserOn = 5;
  if (has_laseron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->laseron(), target);
  }
  
  // optional bool roverDetected = 6;
  if (has_roverdetected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->roverdetected(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cameraTracks::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional bool laserOn = 5;
    if (has_laseron()) {
      total_size += 1 + 1;
    }
    
    // optional bool roverDetected = 6;
    if (has_roverdetected()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .cameraMsgs.track target = 3;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target(i));
  }
  
  // repeated .cameraMsgs.track laser = 4;
  total_size += 1 * this->laser_size();
  for (int i = 0; i < this->laser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->laser(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cameraTracks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cameraTracks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cameraTracks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cameraTracks::MergeFrom(const cameraTracks& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_.MergeFrom(from.target_);
  laser_.MergeFrom(from.laser_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_laseron()) {
      set_laseron(from.laseron());
    }
    if (from.has_roverdetected()) {
      set_roverdetected(from.roverdetected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cameraTracks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cameraTracks::CopyFrom(const cameraTracks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cameraTracks::IsInitialized() const {
  
  return true;
}

void cameraTracks::Swap(cameraTracks* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(status_, other->status_);
    target_.Swap(&other->target_);
    laser_.Swap(&other->laser_);
    std::swap(laseron_, other->laseron_);
    std::swap(roverdetected_, other->roverdetected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cameraTracks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cameraTracks_descriptor_;
  metadata.reflection = cameraTracks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cameraImage::kTimeFieldNumber;
const int cameraImage::kChannelsFieldNumber;
const int cameraImage::kSizeXFieldNumber;
const int cameraImage::kSizeYFieldNumber;
const int cameraImage::kImageDataFieldNumber;
#endif  // !_MSC_VER

cameraImage::cameraImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cameraImage::InitAsDefaultInstance() {
}

cameraImage::cameraImage(const cameraImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cameraImage::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  channels_ = 0;
  sizex_ = 0;
  sizey_ = 0;
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cameraImage::~cameraImage() {
  SharedDtor();
}

void cameraImage::SharedDtor() {
  if (imagedata_ != &::google::protobuf::internal::kEmptyString) {
    delete imagedata_;
  }
  if (this != default_instance_) {
  }
}

void cameraImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cameraImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cameraImage_descriptor_;
}

const cameraImage& cameraImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cameraMsgs_2eproto();  return *default_instance_;
}

cameraImage* cameraImage::default_instance_ = NULL;

cameraImage* cameraImage::New() const {
  return new cameraImage;
}

void cameraImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    channels_ = 0;
    sizex_ = 0;
    sizey_ = 0;
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::kEmptyString) {
        imagedata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cameraImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }
      
      // optional sint32 channels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sizeX;
        break;
      }
      
      // optional sint32 sizeX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sizex_)));
          set_has_sizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sizeY;
        break;
      }
      
      // optional sint32 sizeY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sizey_)));
          set_has_sizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_imageData;
        break;
      }
      
      // optional bytes imageData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cameraImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }
  
  // optional sint32 channels = 2;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->channels(), output);
  }
  
  // optional sint32 sizeX = 3;
  if (has_sizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->sizex(), output);
  }
  
  // optional sint32 sizeY = 4;
  if (has_sizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->sizey(), output);
  }
  
  // optional bytes imageData = 5;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->imagedata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cameraImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }
  
  // optional sint32 channels = 2;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->channels(), target);
  }
  
  // optional sint32 sizeX = 3;
  if (has_sizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->sizex(), target);
  }
  
  // optional sint32 sizeY = 4;
  if (has_sizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->sizey(), target);
  }
  
  // optional bytes imageData = 5;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->imagedata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cameraImage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional sint32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->channels());
    }
    
    // optional sint32 sizeX = 3;
    if (has_sizex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sizex());
    }
    
    // optional sint32 sizeY = 4;
    if (has_sizey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sizey());
    }
    
    // optional bytes imageData = 5;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cameraImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cameraImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cameraImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cameraImage::MergeFrom(const cameraImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
    if (from.has_sizex()) {
      set_sizex(from.sizex());
    }
    if (from.has_sizey()) {
      set_sizey(from.sizey());
    }
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cameraImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cameraImage::CopyFrom(const cameraImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cameraImage::IsInitialized() const {
  
  return true;
}

void cameraImage::Swap(cameraImage* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(channels_, other->channels_);
    std::swap(sizex_, other->sizex_);
    std::swap(sizey_, other->sizey_);
    std::swap(imagedata_, other->imagedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cameraImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cameraImage_descriptor_;
  metadata.reflection = cameraImage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cameraMsgs

// @@protoc_insertion_point(global_scope)
