// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cameraMsgs.proto

#ifndef PROTOBUF_cameraMsgs_2eproto__INCLUDED
#define PROTOBUF_cameraMsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cameraMsgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cameraMsgs_2eproto();
void protobuf_AssignDesc_cameraMsgs_2eproto();
void protobuf_ShutdownFile_cameraMsgs_2eproto();

class cameraStatus;
class track;
class cameraTracks;
class cameraImage;

enum systemStatus {
  CAMERA_DOWN = 0,
  CAMERA_READY = 1,
  CAMERA_OPERATIONAL = 2,
  CAMERA_ERROR = 3,
  CAMERA_FAILED = 4,
  UNKNOWN = 5
};
bool systemStatus_IsValid(int value);
const systemStatus systemStatus_MIN = CAMERA_DOWN;
const systemStatus systemStatus_MAX = UNKNOWN;
const int systemStatus_ARRAYSIZE = systemStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* systemStatus_descriptor();
inline const ::std::string& systemStatus_Name(systemStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    systemStatus_descriptor(), value);
}
inline bool systemStatus_Parse(
    const ::std::string& name, systemStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<systemStatus>(
    systemStatus_descriptor(), name, value);
}
// ===================================================================

class cameraStatus : public ::google::protobuf::Message {
 public:
  cameraStatus();
  virtual ~cameraStatus();
  
  cameraStatus(const cameraStatus& from);
  
  inline cameraStatus& operator=(const cameraStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cameraStatus& default_instance();
  
  void Swap(cameraStatus* other);
  
  // implements Message ----------------------------------------------
  
  cameraStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cameraStatus& from);
  void MergeFrom(const cameraStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline cameraMsgs::systemStatus status() const;
  inline void set_status(cameraMsgs::systemStatus value);
  
  // optional bool laserOn = 3;
  inline bool has_laseron() const;
  inline void clear_laseron();
  static const int kLaserOnFieldNumber = 3;
  inline bool laseron() const;
  inline void set_laseron(bool value);
  
  // optional string text = 4;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // @@protoc_insertion_point(class_scope:cameraMsgs.cameraStatus)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_laseron();
  inline void clear_has_laseron();
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  int status_;
  bool laseron_;
  ::std::string* text_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_cameraMsgs_2eproto();
  friend void protobuf_AssignDesc_cameraMsgs_2eproto();
  friend void protobuf_ShutdownFile_cameraMsgs_2eproto();
  
  void InitAsDefaultInstance();
  static cameraStatus* default_instance_;
};
// -------------------------------------------------------------------

class track : public ::google::protobuf::Message {
 public:
  track();
  virtual ~track();
  
  track(const track& from);
  
  inline track& operator=(const track& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const track& default_instance();
  
  void Swap(track* other);
  
  // implements Message ----------------------------------------------
  
  track* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const track& from);
  void MergeFrom(const track& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional sint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cameraMsgs.track)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cameraMsgs_2eproto();
  friend void protobuf_AssignDesc_cameraMsgs_2eproto();
  friend void protobuf_ShutdownFile_cameraMsgs_2eproto();
  
  void InitAsDefaultInstance();
  static track* default_instance_;
};
// -------------------------------------------------------------------

class cameraTracks : public ::google::protobuf::Message {
 public:
  cameraTracks();
  virtual ~cameraTracks();
  
  cameraTracks(const cameraTracks& from);
  
  inline cameraTracks& operator=(const cameraTracks& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cameraTracks& default_instance();
  
  void Swap(cameraTracks* other);
  
  // implements Message ----------------------------------------------
  
  cameraTracks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cameraTracks& from);
  void MergeFrom(const cameraTracks& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline cameraMsgs::systemStatus status() const;
  inline void set_status(cameraMsgs::systemStatus value);
  
  // repeated .cameraMsgs.track target = 3;
  inline int target_size() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::cameraMsgs::track& target(int index) const;
  inline ::cameraMsgs::track* mutable_target(int index);
  inline ::cameraMsgs::track* add_target();
  inline const ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track >&
      target() const;
  inline ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track >*
      mutable_target();
  
  // repeated .cameraMsgs.track laser = 4;
  inline int laser_size() const;
  inline void clear_laser();
  static const int kLaserFieldNumber = 4;
  inline const ::cameraMsgs::track& laser(int index) const;
  inline ::cameraMsgs::track* mutable_laser(int index);
  inline ::cameraMsgs::track* add_laser();
  inline const ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track >&
      laser() const;
  inline ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track >*
      mutable_laser();
  
  // optional bool laserOn = 5;
  inline bool has_laseron() const;
  inline void clear_laseron();
  static const int kLaserOnFieldNumber = 5;
  inline bool laseron() const;
  inline void set_laseron(bool value);
  
  // optional bool roverDetected = 6;
  inline bool has_roverdetected() const;
  inline void clear_roverdetected();
  static const int kRoverDetectedFieldNumber = 6;
  inline bool roverdetected() const;
  inline void set_roverdetected(bool value);
  
  // @@protoc_insertion_point(class_scope:cameraMsgs.cameraTracks)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_laseron();
  inline void clear_has_laseron();
  inline void set_has_roverdetected();
  inline void clear_has_roverdetected();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track > target_;
  ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track > laser_;
  int status_;
  bool laseron_;
  bool roverdetected_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_cameraMsgs_2eproto();
  friend void protobuf_AssignDesc_cameraMsgs_2eproto();
  friend void protobuf_ShutdownFile_cameraMsgs_2eproto();
  
  void InitAsDefaultInstance();
  static cameraTracks* default_instance_;
};
// -------------------------------------------------------------------

class cameraImage : public ::google::protobuf::Message {
 public:
  cameraImage();
  virtual ~cameraImage();
  
  cameraImage(const cameraImage& from);
  
  inline cameraImage& operator=(const cameraImage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cameraImage& default_instance();
  
  void Swap(cameraImage* other);
  
  // implements Message ----------------------------------------------
  
  cameraImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cameraImage& from);
  void MergeFrom(const cameraImage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional sint32 channels = 2;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);
  
  // optional sint32 sizeX = 3;
  inline bool has_sizex() const;
  inline void clear_sizex();
  static const int kSizeXFieldNumber = 3;
  inline ::google::protobuf::int32 sizex() const;
  inline void set_sizex(::google::protobuf::int32 value);
  
  // optional sint32 sizeY = 4;
  inline bool has_sizey() const;
  inline void clear_sizey();
  static const int kSizeYFieldNumber = 4;
  inline ::google::protobuf::int32 sizey() const;
  inline void set_sizey(::google::protobuf::int32 value);
  
  // optional bytes imageData = 5;
  inline bool has_imagedata() const;
  inline void clear_imagedata();
  static const int kImageDataFieldNumber = 5;
  inline const ::std::string& imagedata() const;
  inline void set_imagedata(const ::std::string& value);
  inline void set_imagedata(const char* value);
  inline void set_imagedata(const void* value, size_t size);
  inline ::std::string* mutable_imagedata();
  inline ::std::string* release_imagedata();
  
  // @@protoc_insertion_point(class_scope:cameraMsgs.cameraImage)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_sizex();
  inline void clear_has_sizex();
  inline void set_has_sizey();
  inline void clear_has_sizey();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 sizex_;
  ::std::string* imagedata_;
  ::google::protobuf::int32 sizey_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cameraMsgs_2eproto();
  friend void protobuf_AssignDesc_cameraMsgs_2eproto();
  friend void protobuf_ShutdownFile_cameraMsgs_2eproto();
  
  void InitAsDefaultInstance();
  static cameraImage* default_instance_;
};
// ===================================================================


// ===================================================================

// cameraStatus

// optional int64 time = 1;
inline bool cameraStatus::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cameraStatus::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cameraStatus::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cameraStatus::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 cameraStatus::time() const {
  return time_;
}
inline void cameraStatus::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
inline bool cameraStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cameraStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cameraStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cameraStatus::clear_status() {
  status_ = 5;
  clear_has_status();
}
inline cameraMsgs::systemStatus cameraStatus::status() const {
  return static_cast< cameraMsgs::systemStatus >(status_);
}
inline void cameraStatus::set_status(cameraMsgs::systemStatus value) {
  GOOGLE_DCHECK(cameraMsgs::systemStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional bool laserOn = 3;
inline bool cameraStatus::has_laseron() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cameraStatus::set_has_laseron() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cameraStatus::clear_has_laseron() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cameraStatus::clear_laseron() {
  laseron_ = false;
  clear_has_laseron();
}
inline bool cameraStatus::laseron() const {
  return laseron_;
}
inline void cameraStatus::set_laseron(bool value) {
  set_has_laseron();
  laseron_ = value;
}

// optional string text = 4;
inline bool cameraStatus::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cameraStatus::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cameraStatus::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cameraStatus::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& cameraStatus::text() const {
  return *text_;
}
inline void cameraStatus::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void cameraStatus::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void cameraStatus::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cameraStatus::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* cameraStatus::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// track

// optional sint32 x = 1;
inline bool track::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void track::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void track::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void track::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 track::x() const {
  return x_;
}
inline void track::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional sint32 y = 2;
inline bool track::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void track::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void track::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void track::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 track::y() const {
  return y_;
}
inline void track::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// cameraTracks

// optional int64 time = 1;
inline bool cameraTracks::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cameraTracks::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cameraTracks::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cameraTracks::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 cameraTracks::time() const {
  return time_;
}
inline void cameraTracks::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional .cameraMsgs.systemStatus status = 2 [default = UNKNOWN];
inline bool cameraTracks::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cameraTracks::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cameraTracks::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cameraTracks::clear_status() {
  status_ = 5;
  clear_has_status();
}
inline cameraMsgs::systemStatus cameraTracks::status() const {
  return static_cast< cameraMsgs::systemStatus >(status_);
}
inline void cameraTracks::set_status(cameraMsgs::systemStatus value) {
  GOOGLE_DCHECK(cameraMsgs::systemStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// repeated .cameraMsgs.track target = 3;
inline int cameraTracks::target_size() const {
  return target_.size();
}
inline void cameraTracks::clear_target() {
  target_.Clear();
}
inline const ::cameraMsgs::track& cameraTracks::target(int index) const {
  return target_.Get(index);
}
inline ::cameraMsgs::track* cameraTracks::mutable_target(int index) {
  return target_.Mutable(index);
}
inline ::cameraMsgs::track* cameraTracks::add_target() {
  return target_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track >&
cameraTracks::target() const {
  return target_;
}
inline ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track >*
cameraTracks::mutable_target() {
  return &target_;
}

// repeated .cameraMsgs.track laser = 4;
inline int cameraTracks::laser_size() const {
  return laser_.size();
}
inline void cameraTracks::clear_laser() {
  laser_.Clear();
}
inline const ::cameraMsgs::track& cameraTracks::laser(int index) const {
  return laser_.Get(index);
}
inline ::cameraMsgs::track* cameraTracks::mutable_laser(int index) {
  return laser_.Mutable(index);
}
inline ::cameraMsgs::track* cameraTracks::add_laser() {
  return laser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track >&
cameraTracks::laser() const {
  return laser_;
}
inline ::google::protobuf::RepeatedPtrField< ::cameraMsgs::track >*
cameraTracks::mutable_laser() {
  return &laser_;
}

// optional bool laserOn = 5;
inline bool cameraTracks::has_laseron() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cameraTracks::set_has_laseron() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cameraTracks::clear_has_laseron() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cameraTracks::clear_laseron() {
  laseron_ = false;
  clear_has_laseron();
}
inline bool cameraTracks::laseron() const {
  return laseron_;
}
inline void cameraTracks::set_laseron(bool value) {
  set_has_laseron();
  laseron_ = value;
}

// optional bool roverDetected = 6;
inline bool cameraTracks::has_roverdetected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cameraTracks::set_has_roverdetected() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cameraTracks::clear_has_roverdetected() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cameraTracks::clear_roverdetected() {
  roverdetected_ = false;
  clear_has_roverdetected();
}
inline bool cameraTracks::roverdetected() const {
  return roverdetected_;
}
inline void cameraTracks::set_roverdetected(bool value) {
  set_has_roverdetected();
  roverdetected_ = value;
}

// -------------------------------------------------------------------

// cameraImage

// optional int64 time = 1;
inline bool cameraImage::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cameraImage::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cameraImage::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cameraImage::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 cameraImage::time() const {
  return time_;
}
inline void cameraImage::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional sint32 channels = 2;
inline bool cameraImage::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cameraImage::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cameraImage::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cameraImage::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 cameraImage::channels() const {
  return channels_;
}
inline void cameraImage::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
}

// optional sint32 sizeX = 3;
inline bool cameraImage::has_sizex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cameraImage::set_has_sizex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cameraImage::clear_has_sizex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cameraImage::clear_sizex() {
  sizex_ = 0;
  clear_has_sizex();
}
inline ::google::protobuf::int32 cameraImage::sizex() const {
  return sizex_;
}
inline void cameraImage::set_sizex(::google::protobuf::int32 value) {
  set_has_sizex();
  sizex_ = value;
}

// optional sint32 sizeY = 4;
inline bool cameraImage::has_sizey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cameraImage::set_has_sizey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cameraImage::clear_has_sizey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cameraImage::clear_sizey() {
  sizey_ = 0;
  clear_has_sizey();
}
inline ::google::protobuf::int32 cameraImage::sizey() const {
  return sizey_;
}
inline void cameraImage::set_sizey(::google::protobuf::int32 value) {
  set_has_sizey();
  sizey_ = value;
}

// optional bytes imageData = 5;
inline bool cameraImage::has_imagedata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cameraImage::set_has_imagedata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cameraImage::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cameraImage::clear_imagedata() {
  if (imagedata_ != &::google::protobuf::internal::kEmptyString) {
    imagedata_->clear();
  }
  clear_has_imagedata();
}
inline const ::std::string& cameraImage::imagedata() const {
  return *imagedata_;
}
inline void cameraImage::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::kEmptyString) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
}
inline void cameraImage::set_imagedata(const char* value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::kEmptyString) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
}
inline void cameraImage::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::kEmptyString) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cameraImage::mutable_imagedata() {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::kEmptyString) {
    imagedata_ = new ::std::string;
  }
  return imagedata_;
}
inline ::std::string* cameraImage::release_imagedata() {
  clear_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagedata_;
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cameraMsgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< cameraMsgs::systemStatus>() {
  return cameraMsgs::systemStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cameraMsgs_2eproto__INCLUDED
